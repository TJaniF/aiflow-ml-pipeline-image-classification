"""
### DAG testing a binary HuggingFace image classifier using a custom operator

This DAG loads testing images from an S3 bucket and tests a HuggingFace
binary image classification model with them. 
The TestHuggingFaceBinaryImageClassifierOperator is a custom operator located in
the include folder of this ML pipeline example repository.
In the ML pipeline repository this DAG will test the baseline model.
"""

from airflow import Dataset as AirflowDataset
from airflow.decorators import dag, task
from astro.sql import get_value_list
from airflow.operators.empty import EmptyOperator
from airflow.providers.amazon.aws.hooks.s3 import S3Hook
from airflow.models import Variable
from collections import Counter
from pendulum import datetime
import shutil

from include.custom_operators.hugging_face import (
    TestHuggingFaceBinaryImageClassifierOperator,
)

from include.custom_operators.utils.utils import (
    standard_transform_function,
    write_all_model_metrics_to_duckdb,
)

from include.config_variables import (
    DB_CONN_ID,
    AWS_CONN_ID,
    TEST_DATA_TABLE_NAME,
    DUCKDB_PATH,
    DUCKDB_POOL_NAME,
    LOCAL_TEMP_TEST_FOLDER,
    RESULTS_TABLE_NAME,
    BASE_MODEL_NAME
)


@dag(
    start_date=datetime(2023, 1, 1),
    schedule=[AirflowDataset(f"duckdb://{DUCKDB_PATH}/{TEST_DATA_TABLE_NAME}")],
    catchup=False,
)
def test_baseline_model():
    start = EmptyOperator(task_id="start")
    end = EmptyOperator(task_id="end")

    get_image_s3_keys_from_duckdb = get_value_list(
        task_id="get_image_s3_keys_from_duckdb",
        sql=f"SELECT image_s3_key FROM {TEST_DATA_TABLE_NAME};",
        conn_id=DB_CONN_ID,
        pool=DUCKDB_POOL_NAME,
    )

    get_labels_from_duckdb = get_value_list(
        task_id="get_labels_from_duckdb",
        sql=f"SELECT label FROM {TEST_DATA_TABLE_NAME};",
        conn_id=DB_CONN_ID,
        pool=DUCKDB_POOL_NAME,
    )

    @task
    def calculate_baseline_accuracy(labels):
        count = Counter(labels)
        most_common = count.most_common(1)[0][0]
        baseline_accuracy = count[most_common] / len(labels)
        Variable.set("baseline_accuracy", baseline_accuracy)

        print(f"Baseline accuracy of the test set is: {baseline_accuracy}")

        return baseline_accuracy

    calculate_baseline_accuracy(get_labels_from_duckdb.map(lambda x: x[0]))

    @task
    def load_test_images(keys):
        hook = S3Hook(aws_conn_id=AWS_CONN_ID)
        images = []
        for key in keys:
            print(key)
            image = hook.download_file(
                key=key,
                preserve_file_name=True,
                local_path=LOCAL_TEMP_TEST_FOLDER,
                use_autogenerated_subdir=False,
            )
            images.append(image)

        return images

    local_images_filepaths = load_test_images(
        get_image_s3_keys_from_duckdb.map(lambda x: x[0])
    )

    test_classifier = TestHuggingFaceBinaryImageClassifierOperator(
        task_id="test_classifier",
        model_name=BASE_MODEL_NAME,
        local_images_filepaths=local_images_filepaths,
        labels=get_labels_from_duckdb.map(lambda x: x[0]),
        test_transform_function=standard_transform_function,
        batch_size=500,
        shuffle=False,
    )

    @task
    def delete_local_test_files(folder_path):
        shutil.rmtree(folder_path)

    @task
    def set_baseline_model_variables(**context):
        baseline_model_accuracy = context["ti"].xcom_pull(
            task_ids="test_classifier",
        )["accuracy"]
        baseline_model_av_loss = context["ti"].xcom_pull(
            task_ids="test_classifier",
        )["average_test_loss"]
        Variable.set("baseline_model_evaluated", True)
        Variable.set("baseline_model_accuracy", baseline_model_accuracy)
        Variable.set("baseline_model_av_loss", baseline_model_av_loss)

    # write model results into a results table in duckdb
    @task(pool=DUCKDB_POOL_NAME)
    def write_model_results_to_duckdb(db_path, table_name, **context):
        write_all_model_metrics_to_duckdb(db_path, table_name, **context)

    (
        start
        >> [
            local_images_filepaths,
            get_labels_from_duckdb,
            get_image_s3_keys_from_duckdb,
        ]
    )

    (
        test_classifier
        >> [
            delete_local_test_files(LOCAL_TEMP_TEST_FOLDER),
            set_baseline_model_variables(),
            write_model_results_to_duckdb(
                db_path=DUCKDB_PATH,
                table_name=RESULTS_TABLE_NAME,
            ),
        ]
        >> end
    )


test_baseline_model()
